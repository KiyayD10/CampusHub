// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model User untuk Dosen dan Mahasiswa
model User {
  id Int @id @default(autoincrement())  // ID unik buat tiap user
  name String                           //Nama lengkap user
  email String @unique                  // Email user, @unique artinya gak boleh ada yang sama
  password String                       //Password diHash (diamanin)
  role String @default("student")       // Peran user, kalau gak diisi otomatis jadi "student
  npm String?                           // Tanda tanya (?) artinya gak wajib diisi (opsional), buat mahasiswa
  phone String?                         // Nomor HP, juga gak wajib diisi
  avatar String?                        // Link ke foto profil, ini juga gk wajib diisi
  createdAt DateTime @default(now())    // Kapan akun dibuat
  updateAt DateTime @updatedAt          // Kapan data user terakhir diubah
}

// Model Task untuk mengatur tugas-tugas kuliah
model Task {
  id Int @id @default(autoincrement())
  title String                            // Untuk judul tugas
  description String? @db.Text            // Deskripsi tugas
  course String?                          // Tugas ini buat mata kuliah apa
  dueDate DateTime                        // Deadline atau tanggal pengumpulan
  priority String @default("medium")      // Tingkat prioritas (low, medium, high)
  status String @default("todo")          // Status pengerjaan
  reminder DateTime?                      // Untuk notif
  createdAt DateTime @default(now())      // Kapan tugas dibuat
  updateAt DateTime @updatedAt            // Kapan tugas terakhir diubah
}

// Model Attendance untuk simpan absen mahasiswa
model Attendance {
  id Int @id @default(autoincrement())
  courseNama String                     // Absen matakuliah apa
  qrHash String                         // QR yang di scan mahasiswa
  latitude Float?                       // Koordinat mahasiswa pas absen 
  longitud Float?                       // Sama aja
  status String @default("present")     // Status absennya apakah(masuk, alpa, telat)
  timesTamp DateTime @default(now())    // Jam berapa dia absen
}

// Model QRSession yang di buat oleh dosen
model QRSession {
  id Int @id @default(autoincrement())
  courseNama String                       // Sesi QR ini untuk matkul apa
  qrHash String @unique                   // Kode unik sesi ini nanti ditampilin jadi QR gak boleh ada yang sama
  expiresAt DateTime                      // Kapan QR ini kadaluarsa / gk bisa di scan lagi
  latitude Float?                         // Lokasi dosen / kelas pas bikin absen
  longitude Float?                        // Sama aja
  radius Int @default(50)                 // Radius toleransi dari lokasi dosen
  createdBy String                        // Email dosen yang buat QR nya
  createdAt DateTime @default(now())      // Sesi QR dibuat
}

// model Product barang yang dijual di marketplace
model Product {
  id Int @id @default(autoincrement())
  name String                            // Nama produk
  description String? @db.Text           // Deskripsi produk
  price Int                              // Harga dari produk 
  stok Int @default(0)                   // Stok yang tersedia  
  category String @default("others")     // Kategori produk
  image String[]                         // Array karena untuk menyimpan link dari gambar produk
  condition String @default("new")       // Kondisi dari barangnya (baru, bagus, dll)
  status String @default("available")    // Status produknya (tersedia, terjual, dll)
  createAt DateTime @default(now())      // Kapan produk di upload
  updateAt DateTime @updatedAt           // Kapan produknya di update
}

// model Transaction untuk riwayat jual - beli
model Transaction {
  id Int @id @default(autoincrement())
  quantity Int @default(1)              // Banyak barang yang dibeli
  totalPrice Int                        // Total harga
  status String @default("pending")     // Status transaksi (pending, sukses, batal)
  notes String? @db.Text                // Catatan dari sipembeli
  createdAt DateTime @default(now())    // Kapan transaksi dibuat
  updateAt DateTime @updatedAt          // Kapan status transaksi di update
}

// model Notification untuk notif di aplikasi
model Notification {
  id Int @id @default(autoincrement())
  title String                          // Judul notif
  body String @db.Text                  // Isi pesan notif nya
  type String @default("general")       // Tipe notif 
  isRead Boolean @default(false)        // Cek udah di baca atau belum
  data Json?                            // Untuk simpan data tambahan
  createdAt DateTime @default(now())    // Kapan notif di buat
}